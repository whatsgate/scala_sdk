/**
 * API whatsgate.ru
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.CheckBody
import io.swagger.client.model.GetchatsBody
import io.swagger.client.model.SeenBody
import io.swagger.client.model.SendBody
import io.swagger.client.model.error
import io.swagger.client.model.inline_response_200
import io.swagger.client.model.inline_response_200_1
import io.swagger.client.model.inline_response_200_2
import io.swagger.client.model.inline_response_200_4
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DefaultApi(
  val defBasePath: String = "https://whatsgate.ru/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DefaultApiAsyncHelper(client, config)

  /**
   * Проверка зарегистрирован ли номер в WhatsApp
   * 
   *
   * @param body Проверяет, зарегистрирован ли указанный номер в WhatsApp. Номер указывается в формате только цифр, например 79999999999 
   * @return inline_response_200_1
   */
  def checkPost(body: CheckBody): Option[inline_response_200_1] = {
    val await = Try(Await.result(checkPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Проверка зарегистрирован ли номер в WhatsApp asynchronously
   * 
   *
   * @param body Проверяет, зарегистрирован ли указанный номер в WhatsApp. Номер указывается в формате только цифр, например 79999999999 
   * @return Future(inline_response_200_1)
   */
  def checkPostAsync(body: CheckBody): Future[inline_response_200_1] = {
      helper.checkPost(body)
  }

  /**
   * Возвращает список активных чатов
   * 
   *
   * @param body Запрашивает и возвращает список активных чатов, включая контакты и группы. В объекте группы находится идентификатор группы, список всех участников группы, права участников (является ли участник администратором группы). 
   * @return inline_response_200_2
   */
  def getChatsPost(body: GetchatsBody): Option[inline_response_200_2] = {
    val await = Try(Await.result(getChatsPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Возвращает список активных чатов asynchronously
   * 
   *
   * @param body Запрашивает и возвращает список активных чатов, включая контакты и группы. В объекте группы находится идентификатор группы, список всех участников группы, права участников (является ли участник администратором группы). 
   * @return Future(inline_response_200_2)
   */
  def getChatsPostAsync(body: GetchatsBody): Future[inline_response_200_2] = {
      helper.getChatsPost(body)
  }

  /**
   * Отправляет команду в чат, что последние сообщения просмотрены
   * 
   *
   * @param body Команда устанавливает у всех сообщений в указанном чате статус просмотрены. 
   * @return inline_response_200_4
   */
  def seenPost(body: SeenBody): Option[inline_response_200_4] = {
    val await = Try(Await.result(seenPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Отправляет команду в чат, что последние сообщения просмотрены asynchronously
   * 
   *
   * @param body Команда устанавливает у всех сообщений в указанном чате статус просмотрены. 
   * @return Future(inline_response_200_4)
   */
  def seenPostAsync(body: SeenBody): Future[inline_response_200_4] = {
      helper.seenPost(body)
  }

  /**
   * Отправка сообщения
   * 
   *
   * @param body Отправляет текстовое или мультимедийное сообщение контакту либо группе. Может использоваться синхронно (возвращает ответ после отправки сообщения, ответ содержит объект отправленного сообщения с идентификатором), либо асинхронно (ответ содержит результат постановки в очередь, а отправленное сообщение приходит на указанный webhook). По умолчанию используется асинхронная отправка. 
   * @return inline_response_200
   */
  def sendMessage(body: SendBody): Option[inline_response_200] = {
    val await = Try(Await.result(sendMessageAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Отправка сообщения asynchronously
   * 
   *
   * @param body Отправляет текстовое или мультимедийное сообщение контакту либо группе. Может использоваться синхронно (возвращает ответ после отправки сообщения, ответ содержит объект отправленного сообщения с идентификатором), либо асинхронно (ответ содержит результат постановки в очередь, а отправленное сообщение приходит на указанный webhook). По умолчанию используется асинхронная отправка. 
   * @return Future(inline_response_200)
   */
  def sendMessageAsync(body: SendBody): Future[inline_response_200] = {
      helper.sendMessage(body)
  }

}

class DefaultApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def checkPost(body: CheckBody)(implicit reader: ClientResponseReader[inline_response_200_1], writer: RequestWriter[CheckBody]): Future[inline_response_200_1] = {
    // create path and map variables
    val path = (addFmt("/check"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->checkPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getChatsPost(body: GetchatsBody)(implicit reader: ClientResponseReader[inline_response_200_2], writer: RequestWriter[GetchatsBody]): Future[inline_response_200_2] = {
    // create path and map variables
    val path = (addFmt("/get-chats"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->getChatsPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def seenPost(body: SeenBody)(implicit reader: ClientResponseReader[inline_response_200_4], writer: RequestWriter[SeenBody]): Future[inline_response_200_4] = {
    // create path and map variables
    val path = (addFmt("/seen"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->seenPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendMessage(body: SendBody)(implicit reader: ClientResponseReader[inline_response_200], writer: RequestWriter[SendBody]): Future[inline_response_200] = {
    // create path and map variables
    val path = (addFmt("/send"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendMessage")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
